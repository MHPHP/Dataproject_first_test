if (is.null(frekvens_taxa)) {
frekvens_taxa <- read.csv("../../Raw data/alledata-frekvens-samletaxa.csv")
}
#Merge All the data together
frekvens_cover <- merge(frekvens,cover, by = c("plot","site","year"),suffixes = c("Frekvens","Cover"))
frekvens_cover <- setNames(frekvens_cover,paste0(names(frekvens_cover),ifelse(names(frekvens_cover) %in% setdiff(names(frekvens),names(cover)),"frekvens","")))
frekvens_cover <- setNames(frekvens_cover,paste0(names(frekvens_cover),ifelse(names(frekvens_cover) %in% setdiff(names(cover),names(frekvens)),"cover","")))
df1 <- merge(abiotiske, frekvens_cover, by = c("plot","site","year"))
df1 <- merge(df1, frekvens_taxa, by = c("plot","site","year"))
df1 <- merge(df1, cover_taxa, by = c("plot","site","year"))
#change terhabtype input to string and the correct format
terhabtype <- paste0("{",toString(terhabtype),"}")
# select the choosen terhabtype
df2 <- df1[df1$terhabtype == terhabtype ,]
# remove species that were not observed or variables with only missing value
df2 <- df2[, colSums(data_5130_full != 0) > 0]
df2 <- df2[, colSums(data_5130 != "mv") > 0]
return(df2)
}
data_6230 <-  create_terhab_data(6230)
create_terhab_data <- function(terhabtype, cover =NULL, frekvens = NULL, abiotiske = NULL, artslist = NULL, traits = NULL, cover_taxa = NULL, frekvens_taxa = NULL  ) {
if (is.null(cover)) {
cover <- read.csv("../../Raw data/alledata-cover.csv")
}
if (is.null(frekvnes)) {
frekvnes <- read.csv("../../Raw data/alledata-frekvens.csv")
}
if (is.null(abiotiske)) {
abiotiske<- read.csv("../../Raw data/alledata-abiotiske.csv")
}
if (is.null(artslist)) {
artslist <-  read.csv("../../Raw data/artsliste.csv")
}
if (is.null(traits)) {
traits <- read.csv("../../Raw data/traits.csv")
}
if (is.null(cover_taxa)) {
cover_taxa <- read.csv("../../Raw data/alledata-cover-samletaxa.csv")
}
if (is.null(frekvens_taxa)) {
frekvens_taxa <- read.csv("../../Raw data/alledata-frekvens-samletaxa.csv")
}
#Merge All the data together
frekvens_cover <- merge(frekvens,cover, by = c("plot","site","year"),suffixes = c("Frekvens","Cover"))
frekvens_cover <- setNames(frekvens_cover,paste0(names(frekvens_cover),ifelse(names(frekvens_cover) %in% setdiff(names(frekvens),names(cover)),"frekvens","")))
frekvens_cover <- setNames(frekvens_cover,paste0(names(frekvens_cover),ifelse(names(frekvens_cover) %in% setdiff(names(cover),names(frekvens)),"cover","")))
df1 <- merge(abiotiske, frekvens_cover, by = c("plot","site","year"))
df1 <- merge(df1, frekvens_taxa, by = c("plot","site","year"))
df1 <- merge(df1, cover_taxa, by = c("plot","site","year"))
#change terhabtype input to string and the correct format
terhabtype <- paste0("{",toString(terhabtype),"}")
# select the choosen terhabtype
df2 <- df1[df1$terhabtype == terhabtype ,]
# remove species that were not observed or variables with only missing value
df2 <- df2[, colSums(data_5130_full != 0) > 0]
df2 <- df2[, colSums(data_5130 != "mv") > 0]
return(df2)
}
data_6230 <-  create_terhab_data(6230)
create_terhab_data <- function(terhabtype, cover =NULL, frekvens = NULL, abiotiske = NULL, artslist = NULL, traits = NULL, cover_taxa = NULL, frekvens_taxa = NULL  ) {
if (is.null(cover)) {
cover <- read.csv("../../Raw data/alledata-cover.csv")
}
if (is.null(frekvnes)) {
frekvens <- read.csv("../../Raw data/alledata-frekvens.csv")
}
if (is.null(abiotiske)) {
abiotiske<- read.csv("../../Raw data/alledata-abiotiske.csv")
}
if (is.null(artslist)) {
artslist <-  read.csv("../../Raw data/artsliste.csv")
}
if (is.null(traits)) {
traits <- read.csv("../../Raw data/traits.csv")
}
if (is.null(cover_taxa)) {
cover_taxa <- read.csv("../../Raw data/alledata-cover-samletaxa.csv")
}
if (is.null(frekvens_taxa)) {
frekvens_taxa <- read.csv("../../Raw data/alledata-frekvens-samletaxa.csv")
}
#Merge All the data together
frekvens_cover <- merge(frekvens,cover, by = c("plot","site","year"),suffixes = c("Frekvens","Cover"))
frekvens_cover <- setNames(frekvens_cover,paste0(names(frekvens_cover),ifelse(names(frekvens_cover) %in% setdiff(names(frekvens),names(cover)),"frekvens","")))
frekvens_cover <- setNames(frekvens_cover,paste0(names(frekvens_cover),ifelse(names(frekvens_cover) %in% setdiff(names(cover),names(frekvens)),"cover","")))
df1 <- merge(abiotiske, frekvens_cover, by = c("plot","site","year"))
df1 <- merge(df1, frekvens_taxa, by = c("plot","site","year"))
df1 <- merge(df1, cover_taxa, by = c("plot","site","year"))
#change terhabtype input to string and the correct format
terhabtype <- paste0("{",toString(terhabtype),"}")
# select the choosen terhabtype
df2 <- df1[df1$terhabtype == terhabtype ,]
# remove species that were not observed or variables with only missing value
df2 <- df2[, colSums(data_5130_full != 0) > 0]
df2 <- df2[, colSums(data_5130 != "mv") > 0]
return(df2)
}
data_6230 <-  create_terhab_data(6230)
create_terhab_data <- function(terhabtype, cover =NULL, frekvens = NULL, abiotiske = NULL, artslist = NULL, traits = NULL, cover_taxa = NULL, frekvens_taxa = NULL  ) {
if (is.null(cover)) {
cover <- read.csv("../../Raw data/alledata-cover.csv")
}
if (is.null(frekvens)) {
frekvens <- read.csv("../../Raw data/alledata-frekvens.csv")
}
if (is.null(abiotiske)) {
abiotiske<- read.csv("../../Raw data/alledata-abiotiske.csv")
}
if (is.null(artslist)) {
artslist <-  read.csv("../../Raw data/artsliste.csv")
}
if (is.null(traits)) {
traits <- read.csv("../../Raw data/traits.csv")
}
if (is.null(cover_taxa)) {
cover_taxa <- read.csv("../../Raw data/alledata-cover-samletaxa.csv")
}
if (is.null(frekvens_taxa)) {
frekvens_taxa <- read.csv("../../Raw data/alledata-frekvens-samletaxa.csv")
}
#Merge All the data together
frekvens_cover <- merge(frekvens,cover, by = c("plot","site","year"),suffixes = c("Frekvens","Cover"))
frekvens_cover <- setNames(frekvens_cover,paste0(names(frekvens_cover),ifelse(names(frekvens_cover) %in% setdiff(names(frekvens),names(cover)),"frekvens","")))
frekvens_cover <- setNames(frekvens_cover,paste0(names(frekvens_cover),ifelse(names(frekvens_cover) %in% setdiff(names(cover),names(frekvens)),"cover","")))
df1 <- merge(abiotiske, frekvens_cover, by = c("plot","site","year"))
df1 <- merge(df1, frekvens_taxa, by = c("plot","site","year"))
df1 <- merge(df1, cover_taxa, by = c("plot","site","year"))
#change terhabtype input to string and the correct format
terhabtype <- paste0("{",toString(terhabtype),"}")
# select the choosen terhabtype
df2 <- df1[df1$terhabtype == terhabtype ,]
# remove species that were not observed or variables with only missing value
df2 <- df2[, colSums(data_5130_full != 0) > 0]
df2 <- df2[, colSums(data_5130 != "mv") > 0]
return(df2)
}
data_6230 <-  create_terhab_data(6230)
create_terhab_data <- function(terhabtype, cover =NULL, frekvens = NULL, abiotiske = NULL, artslist = NULL, traits = NULL, cover_taxa = NULL, frekvens_taxa = NULL  ) {
if (is.null(cover)) {
cover <- read.csv("../../Raw data/alledata-cover.csv")
}
if (is.null(frekvens)) {
frekvens <- read.csv("../../Raw data/alledata-frekvens.csv")
}
if (is.null(abiotiske)) {
abiotiske<- read.csv("../../Raw data/alledata-abiotiske.csv")
}
if (is.null(artslist)) {
artslist <-  read.csv("../../Raw data/artsliste.csv")
}
if (is.null(traits)) {
traits <- read.csv("../../Raw data/traits.csv")
}
if (is.null(cover_taxa)) {
cover_taxa <- read.csv("../../Raw data/alledata-cover-samletaxa.csv")
}
if (is.null(frekvens_taxa)) {
frekvens_taxa <- read.csv("../../Raw data/alledata-frekvens-samletaxa.csv")
}
#Merge All the data together
frekvens_cover <- merge(frekvens,cover, by = c("plot","site","year"),suffixes = c("Frekvens","Cover"))
frekvens_cover <- setNames(frekvens_cover,paste0(names(frekvens_cover),ifelse(names(frekvens_cover) %in% setdiff(names(frekvens),names(cover)),"frekvens","")))
frekvens_cover <- setNames(frekvens_cover,paste0(names(frekvens_cover),ifelse(names(frekvens_cover) %in% setdiff(names(cover),names(frekvens)),"cover","")))
df1 <- merge(abiotiske, frekvens_cover, by = c("plot","site","year"))
df1 <- merge(df1, frekvens_taxa, by = c("plot","site","year"))
df1 <- merge(df1, cover_taxa, by = c("plot","site","year"))
#change terhabtype input to string and the correct format
terhabtype <- paste0("{",toString(terhabtype),"}")
# select the choosen terhabtype
df2 <- df1[df1$terhabtype == terhabtype ,]
# remove species that were not observed or variables with only missing value
df2 <- df2[, colSums(df2 != 0) > 0]
df2 <- df2[, colSums(df2 != "mv") > 0]
return(df2)
}
data_6230 <-  create_terhab_data(6230)
View(data_6230)
write.csv(data_6230, file = "../Data/Processed data//data_6230.csv" , row.names=FALSE)
rm(list = ls())
data_6230 <- read.csv(file ="../Data/Processed data//data_6230.csv" )
cover_data1 <-  data_6230[, grep("Cover", names(data_6230))]
colnames(cover_data1) <- gsub("Cover", "", colnames(cover_data1))
frekvens_data1 <-  data_6230[, grep("Frekvens", names(data_6230))]
colnames(frekvens_data1) <- gsub("Frekvens", "", colnames(frekvens_data1))
index <- shanon_index_v1(cover_data1, frekvens_data1)
source("functions.r")
index <- shanon_index_v1(cover_data1, frekvens_data1)
data_6230$shanon_index_v1 <- shanon_index_v1(cover_data1, frekvens_data1)
View(data_6230)
data_6230 <- convert_to_longlat(data_6230, data_6230$UTMx, data_6230$UTMy)
animation_map(data?6230, longtitude, latitude, shanon_index_v1 )
animation_map(data_6230, longtitude, latitude, shanon_index_v1 )
animation_map(data_6230, longtitude, latitude, shanon_index_v1, year )
library(VGAM)
head(cbind(depvar(fit), weights(fit, type = "prior")))
bdata <- data.frame(N = 10, mu = 0.5, rho = 0.8)
bdata <- transform(bdata,
y = rbetabinom(100, size = N, prob = mu, rho = rho))
fit <- vglm(cbind(y, N-y) ~ 1, betabinomial, data = bdata, trace = TRUE)
coef(fit, matrix = TRUE)
Coef(fit)
head(cbind(depvar(fit), weights(fit, type = "prior")))
head(cbind(depvar(fit), weights(fit, type = "prior")))
View(bdata)
View(fit)
fit <- vglm(cbind(R, N-R) ~ 1, betabinomial, lirat,
trace = TRUE, subset = N > 1)
coef(fit, matrix = TRUE)
Coef(fit)
t(fitted(fit))
t(depvar(fit))
t(weights(fit, type = "prior"))
install.packages("inla")
install.packages("r-inla")
install.packages("R-INLA")
install.packages("INLA",repos=c(getOption("repos"),INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
## overdispersion parameter in the betabinomial
rho = 0.7
n = 1000
z = rnorm(n, sd=0.2)
Ntrials = sample(1:10, n, replace=TRUE)
eta = 1 + z
p.eta = exp(eta)/(1+exp(eta))
a = p.eta * (1-rho)/rho
b = (p.eta * rho - p.eta - rho + 1)/rho
p = rbeta(n, a, b)
y = rbinom(n, Ntrials, p)
formula = y ~ 1 + z
data = data.frame(y, z)
r = inla(formula, data = data,family = "betabinomial", Ntrials=Ntrials)
library(INLA)
## overdispersion parameter in the betabinomial
rho = 0.7
n = 1000
z = rnorm(n, sd=0.2)
Ntrials = sample(1:10, n, replace=TRUE)
eta = 1 + z
p.eta = exp(eta)/(1+exp(eta))
a = p.eta * (1-rho)/rho
b = (p.eta * rho - p.eta - rho + 1)/rho
p = rbeta(n, a, b)
y = rbinom(n, Ntrials, p)
formula = y ~ 1 + z
data = data.frame(y, z)
r = inla(formula, data = data,family = "betabinomial", Ntrials=Ntrials)
summary(r)
animation_map(data_6230, longtitude, latitude, shanon_index_v1, year )
View(data_6230)
browseVignettes(package = NULL, lib.loc = NULL, all = TRUE)
version
knitr::opts_chunk$set(echo = FALSE, comment =NA,reult = "hide" ,warning = FALSE, message =FALSE)
library(tidyverse)
is.installed <- function(mypkg) is.element(mypkg, installed.packages()[,1])
if(!is.installed("rstudioapi")) install.packages("rstudioapi")
if(!is.installed("stringr"))    install.packages("stringr")
if(!is.installed("tidyverse"))  install.packages("tidyverse")
library("rstudioapi")
library("stringr")
library("tidyverse")
library(rstudioapi)
library(stringr)
library(tidyverse)
library(googleway)
knitr::opts_chunk$set(echo = FALSE, comment =NA,reult = "hide" ,warning = FALSE, message =FALSE)
library(tidyverse)
is.installed <- function(mypkg) is.element(mypkg, installed.packages()[,1])
if(!is.installed("rstudioapi")) install.packages("rstudioapi")
if(!is.installed("stringr"))    install.packages("stringr")
if(!is.installed("tidyverse"))  install.packages("tidyverse")
library("rstudioapi")
library("stringr")
library("tidyverse")
library(rstudioapi)
library(stringr)
library(tidyverse)
library(googleway)
knitr::opts_chunk$set(echo = TRUE)
naive_model <- function(cover, frekvens, konstant){
library(tidyverse)
names_no_loop <- c("site", "plot", "year")
names_to_loop <- setdiff(colnames(frekvens),names_no_loop)
frekvens_obs <- frekvens
for (ele in names_to_loop){
if (sum(frekvens[,ele]) == 0){
frekvens_obs <- frekvens_obs[,!(names(frekvens_obs) %in% ele)]
}
}
cover_obs <- cover
for (ele in colnames(cover)){
if (!(ele %in% colnames(frekvens_obs))){
cover_obs <- cover_obs[,!(names(cover_obs) %in% ele)]
}
}
#opdatere cover data de steder hvor dette er nul og frekvens én
names_to_loop <- setdiff(colnames(cover_obs),names_no_loop)
for (i in rownames(cover_obs)){
for (j in names_to_loop){
if (cover_obs[i,j] == 0 & frekvens_obs[i,j] == 1 ){
cover_obs[i,j] <- konstant
}
}
}
n <- length(colnames(cover_obs))
cover_obs$Total <- rowSums(cover_obs[,4:n])
cover_obs$Shannon_index <-
rowSums(-cover_obs[,4:n]/cover_obs$Total*log(cover_obs[,4:n]/cover_obs$Total),
na.rm = TRUE)
df <- cover_obs %>% group_by(site) %>% summarise("Shannon index" = sum(Shannon_index))
return(df)
}
library(tidyverse)
library(fitdistrplus)
source("functions.r")
data_5130 <-  read.csv("../Data/processed data/data_5130.csv")
cover_data1 <-  data_5130[, grep("Cover", names(data_5130))]
colnames(cover_data1) <- gsub("Cover", "", colnames(cover_data1))
frekvens_data1 <-  data_5130[, grep("Frekvens", names(data_5130))]
colnames(frekvens_data1) <- gsub("Frekvens", "", colnames(frekvens_data1))
t <-  naive_model(cover_data1, frekvens_data1, 1/64)
View(data_5130)
data_5130_site <- data_5130[, c("plot", "site", "year")]
View(data_5130_site)
data_5130_site + cover_data1
cbind(data_5130_site , cover_data1)
cover_data <-  cbind(data_5130_site , cover_data1)
frekvens_data <- cbind(data_5130_site, frekvens_data1)
t <-  naive_model(cover_data, frekvens_data, 1/64)
View(t)
data_5130[data_5130$site == 1243]
data_5130[data_5130$site == 1243,]
View(t)
View(t)
data_5130_site_ag <- aggregate(data_5130, by = "site", fFUN = sum())
data_5130_site_ag <- aggregate(data_5130, by = "site", fFUN = sum)
data_5130_site_ag <- aggregate(data_5130, by = "site", FUN = sum)
data_5130_site_ag <- aggregate(data_5130, by = c("site"), FUN = sum)
data_5130_site_ag <- aggregate(data_5130, by = site, FUN = sum)
data_5130_site_ag <- aggregate(data_5130, by = data_5130$site, FUN = sum)
data_5130_site_ag <- aggregate.data.frame(data_5130, by = data_5130$site, FUN = sum)
data_5130_site_ag <- aggregate.data.frame(data_5130, by = c(data_5130$site), FUN = sum)
data_5130_site_ag <- aggregate.data.frame(data_5130, by = list(data_5130$site), FUN = sum)
data_5130_site_ag <- aggregate.data.frame(data_5130, by = list(data_5130$site), FUN = sum())
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
View(data_5130_lim)
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = sum)
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = avg)
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
View(data_5130_site_ag)
naive_site <-  naive_model(cover_data, frekvens_data, 1/64)
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
data_5130_site_ag$naive1 <- naive_site
naive_model <- function(cover, frekvens, konstant){
library(tidyverse)
names_no_loop <- c("site", "plot", "year")
names_to_loop <- setdiff(colnames(frekvens),names_no_loop)
frekvens_obs <- frekvens
for (ele in names_to_loop){
if (sum(frekvens[,ele]) == 0){
frekvens_obs <- frekvens_obs[,!(names(frekvens_obs) %in% ele)]
}
}
cover_obs <- cover
for (ele in colnames(cover)){
if (!(ele %in% colnames(frekvens_obs))){
cover_obs <- cover_obs[,!(names(cover_obs) %in% ele)]
}
}
#opdatere cover data de steder hvor dette er nul og frekvens én
names_to_loop <- setdiff(colnames(cover_obs),names_no_loop)
for (i in rownames(cover_obs)){
for (j in names_to_loop){
if (cover_obs[i,j] == 0 & frekvens_obs[i,j] == 1 ){
cover_obs[i,j] <- konstant
}
}
}
n <- length(colnames(cover_obs))
cover_obs$Total <- rowSums(cover_obs[,4:n])
cover_obs$Shannon_index <-
rowSums(-cover_obs[,4:n]/cover_obs$Total*log(cover_obs[,4:n]/cover_obs$Total),
na.rm = TRUE)
df <- cover_obs %>% group_by(site) %>% summarise("Shannon index" = mean(Shannon_index))
return(df)
}
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
data_5130_site_ag$naive1 <- naive_site
naive_site <-  naive_model(cover_data, frekvens_data, 1/64)
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
data_5130_site_ag$naive1 <- naive_site
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
data_5130_site_ag <- merge(data_5130_site_ag, naive_site, by = site)
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
data_5130_site_ag <- merge(data_5130_site_ag, naive_site)
View(data_5130_site_ag)
naive_site <-  naive_model(cover_data, frekvens_data, 1/16)
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
data_5130_site_ag <- merge(data_5130_site_ag, naive_site)
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
data_5130_site_ag <- merge(data_5130_site_ag, naive_site)
data_5130_site_ag$diff <- data_5130_site_ag$shanon_index_v1 - data_5130_site_ag$`Shannon index`
mean(data_5130_site_ag$diff)
naive_site <-  naive_model(cover_data, frekvens_data, 1/8)
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
data_5130_site_ag <- merge(data_5130_site_ag, naive_site)
data_5130_site_ag$diff <- data_5130_site_ag$shanon_index_v1 - data_5130_site_ag$`Shannon index`
mean(data_5130_site_ag$diff)
naive_site <-  naive_model(cover_data, frekvens_data, 1/4)
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
data_5130_site_ag <- merge(data_5130_site_ag, naive_site)
data_5130_site_ag$diff <- data_5130_site_ag$shanon_index_v1 - data_5130_site_ag$`Shannon index`
mean(data_5130_site_ag$diff)
naive_site <-  naive_model(cover_data, frekvens_data, 1)
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
data_5130_site_ag <- merge(data_5130_site_ag, naive_site)
data_5130_site_ag$diff <- data_5130_site_ag$shanon_index_v1 - data_5130_site_ag$`Shannon index`
mean(data_5130_site_ag$diff)
naive_site <-  naive_model(cover_data, frekvens_data, 0.8)
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
data_5130_site_ag <- merge(data_5130_site_ag, naive_site)
data_5130_site_ag$diff <- data_5130_site_ag$shanon_index_v1 - data_5130_site_ag$`Shannon index`
mean(data_5130_site_ag$diff)
naive_site <-  naive_model(cover_data, frekvens_data, 0.75)
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
data_5130_site_ag <- merge(data_5130_site_ag, naive_site)
data_5130_site_ag$diff <- data_5130_site_ag$shanon_index_v1 - data_5130_site_ag$`Shannon index`
mean(data_5130_site_ag$diff)
naive_site <-  naive_model(cover_data, frekvens_data, 0.7)
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
data_5130_site_ag <- merge(data_5130_site_ag, naive_site)
data_5130_site_ag$diff <- data_5130_site_ag$shanon_index_v1 - data_5130_site_ag$`Shannon index`
mean(data_5130_site_ag$diff)
naive_site <-  naive_model(cover_data, frekvens_data, 0.69)
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
data_5130_site_ag <- merge(data_5130_site_ag, naive_site)
data_5130_site_ag$diff <- data_5130_site_ag$shanon_index_v1 - data_5130_site_ag$`Shannon index`
mean(data_5130_site_ag$diff)
naive_site <-  naive_model(cover_data, frekvens_data, 0.68)
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
data_5130_site_ag <- merge(data_5130_site_ag, naive_site)
data_5130_site_ag$diff <- data_5130_site_ag$shanon_index_v1 - data_5130_site_ag$`Shannon index`
mean(data_5130_site_ag$diff)
naive_site <-  naive_model(cover_data, frekvens_data, 0.67)
data_5130_lim <- data_5130[,c("site", "year", "simple_shanon_index", "longtitude_mean_site", "latitude_mean_site", "shanon_index_v1")]
data_5130_site_ag <- aggregate.data.frame(data_5130_lim, by = list(data_5130$site), FUN = mean)
data_5130_site_ag <- merge(data_5130_site_ag, naive_site)
data_5130_site_ag$diff <- data_5130_site_ag$shanon_index_v1 - data_5130_site_ag$`Shannon index`
mean(data_5130_site_ag$diff)
View(data_5130)
# input is cover data and frekvens data as two data frames, where the rows match for the same observation, and the names of the species match.
shanon_index_v1_beta_data <- function(cover_data, frekvens_data) {
#Load functions
library(tidyverse)
library(fitdistrplus)
#create data frame to hold the fitted values for each species
beta_fit <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("species","a", "b")
colnames(beta_fit) <- x
# for Each species calculate the shape parameter for the fitted beta distribution and save them in a data frame.
for (specie in colnames(cover_data)) {
beta_data <- cover_data[,specie]/16
beta_data <- beta_data[!(beta_data == 0)]
beta_data <-  ifelse(beta_data == 1, 0.9999, beta_data)
if (length(unique( beta_data)) > 1) {
beta_data_fitted <- fitdist(beta_data, "beta")
beta_fit[nrow(beta_fit) + 1,] <- c(specie, beta_data_fitted$estimate[1], beta_data_fitted$estimate[2])
}
}
# for each plot create a list with all the cover data and a total of how may obersevations.
shanon_list <- c()
for (row in 1:nrow(cover_data)) {
total_cover_obs <- sum(cover_data[row,]) #is not currently used
# Create a list with all the Cover data greater than 0 for a given row
all_obs <- cover_data[row,]
all_obs <- all_obs[all_obs > 0]/16
# for a given row, find out what species is found in frekvens
species_spotted_in_frekvens <- colnames(frekvens_data[c(frekvens_data[row,]  == 1)])
#For each species spotten in frekvens but not in cover, appends its posterior cover to the cover data for that row
for (species_spotted in species_spotted_in_frekvens ) {
if (length(cover_data[[species_spotted]][row]) == 1 && cover_data[[species_spotted]][row] == 0) {
all_obs <- append(all_obs, (as.numeric(beta_fit[beta_fit$species == species_spotted,]$a) + 1 -1)/
(as.numeric(beta_fit[beta_fit$species == species_spotted,]$a) +
as.numeric(beta_fit[beta_fit$species == species_spotted,]$b) + 17 -2))
total_cover_obs <- total_cover_obs +1
}
}
#Calculate the shanon index value and append it to the list
total_cover <- sum(all_obs)
shanon_value <- -sum(all_obs/total_cover * log((all_obs/total_cover)))
shanon_list <- append(shanon_list,shanon_value)
}
return(beta_fit)
}
beta_data <-  shanon_index_v1_beta_data(cover_data1, frekvens_data1)
View(beta_data)
beta_data$mode <- beta_data$a/(beta_data$a + beta_data$b +15)
beta_data$mode <- as.numeric(beta_data$a)/(as.numeric(beta_data$a) + as.numeric(beta_data$b) +15)
mean(beta_data$mode)*16
