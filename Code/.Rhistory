#create data frame to hold the fitted values for each species
beta_fit <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("species","a", "b")
colnames(beta_fit) <- x
# for Each species calculate the shape parameter for the fitted beta distribution and save them in a data frame.
for (specie in colnames(frekvens_data)) {
if (specie %in% colnames(cover_data)) {
beta_data <- cover_data[,specie]/16
#remove all plots with 0 in cover or remove all plots with 0 in frekvens.
#beta_data <- beta_data[!(beta_data == 0)]
beta_data <- beta_data[!(frekvens_data[[specie]] == 0)]
if (length( unique(beta_data)) > 1) {
beta_data_fitted <- fitdist(beta_data, "beta", method = "mme")
beta_fit[nrow(beta_fit) + 1,] <- c(specie, beta_data_fitted$estimate[1], beta_data_fitted$estimate[2])
}
else
beta_fit[nrow(beta_fit) + 1,] <- c(specie, 0, 0)
}
else
beta_fit[nrow(beta_fit) + 1,] <- c(specie, 0, 0)
}
# for each plot create a list with all the cover data and a total of how may observations.
shanon_list <- c()
for (row in 1:nrow(cover_data)) {
total_cover_obs <- sum(cover_data[row,]) #is not currently used
# Create an empty list for a given row
all_obs <- c()
# for a given row, find out what species is found in frekvens
species_spotted_in_frekvens <- colnames(frekvens_data[c(frekvens_data[row,]  == 1)])
#For each species spotted in frekvens, appends its posterior cover to the cover data for that row
for (species_spotted in species_spotted_in_frekvens ) {
alpha_post <- as.numeric(beta_fit[beta_fit$species == species_spotted,]$a) +
as.numeric(cover_data[[species_spotted]][row])
beta_post <-  as.numeric(beta_fit[beta_fit$species == species_spotted,]$b) + 16 - as.numeric(cover_data[[species_spotted]][row])
print(c("a",alpha_post, "b", beta_post, species_spotted))
all_obs <- append(all_obs, (alpha_post)/(alpha_post+beta_post))
}
#print(c(all_obs, species_spotted_in_frekvens))
print(c(length(all_obs), length(species_spotted_in_frekvens)))
#Calculate the shanon index value and append it to the list after normalizing and removing zeroes
total_cover <- sum(all_obs)
all_obs <- all_obs[!(all_obs == 0)]
shanon_value <- -sum(all_obs/total_cover * log((all_obs/total_cover)))
shanon_list <- append(shanon_list,shanon_value)
}
print(beta_fit)
return(shanon_list)
}
data_5130$shanon_index_v4 <- shanon_index_v4(cover_data1, frekvens_data1)
shanon_index_v4 <- function(cover_data, frekvens_data) {
#Load functions
library(tidyverse)
library(fitdistrplus)
#create data frame to hold the fitted values for each species
beta_fit <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("species","a", "b")
colnames(beta_fit) <- x
# for Each species calculate the shape parameter for the fitted beta distribution and save them in a data frame.
for (specie in colnames(frekvens_data)) {
if (specie %in% colnames(cover_data)) {
beta_data <- cover_data[,specie]/16
#remove all plots with 0 in cover or remove all plots with 0 in frekvens.
#beta_data <- beta_data[!(beta_data == 0)]
beta_data <- beta_data[!(frekvens_data[[specie]] == 0)]
if (length( unique(beta_data)) > 1) {
beta_data_fitted <- fitdist(beta_data, "beta", method = "mme")
beta_fit[nrow(beta_fit) + 1,] <- c(specie, beta_data_fitted$estimate[1], beta_data_fitted$estimate[2])
}
else
beta_fit[nrow(beta_fit) + 1,] <- c(specie, 0, 0)
}
else
beta_fit[nrow(beta_fit) + 1,] <- c(specie, 0, 0)
}
# for each plot create a list with all the cover data and a total of how may observations.
shanon_list <- c()
for (row in 1:nrow(cover_data)) {
total_cover_obs <- sum(cover_data[row,]) #is not currently used
# Create an empty list for a given row
all_obs <- c()
# for a given row, find out what species is found in frekvens
species_spotted_in_frekvens <- colnames(frekvens_data[c(frekvens_data[row,]  == 1)])
#For each species spotted in frekvens, appends its posterior cover to the cover data for that row
for (species_spotted in species_spotted_in_frekvens ) {
alpha_post <- as.numeric(beta_fit[beta_fit$species == species_spotted,]$a) +
as.numeric(cover_data[[species_spotted]][row])
beta_post <-  as.numeric(beta_fit[beta_fit$species == species_spotted,]$b) + 16 - as.numeric(cover_data[[species_spotted]][row])
#print(c("a",alpha_post, "b", beta_post, species_spotted))
all_obs <- append(all_obs, (alpha_post)/(alpha_post+beta_post))
}
#print(c(all_obs, species_spotted_in_frekvens))
#print(c(length(all_obs), length(species_spotted_in_frekvens)))
#Calculate the shanon index value and append it to the list after normalizing and removing zeroes
total_cover <- sum(all_obs)
all_obs <- all_obs[!(all_obs == 0)]
shanon_value <- -sum(all_obs/total_cover * log((all_obs/total_cover)))
shanon_list <- append(shanon_list,shanon_value)
}
return(beta_fit)
#return(shanon_list)
}
beta2 <- shanon_index_v4(cover_data1, frekvens_data1)
View(beta2)
write.csv(data_5130, file = "../Data/Processed data//data_5130.csv", row.names=FALSE)
data_5130 <-  read.csv("../Data/processed data/data_5130.csv")
View(data_5130)
View(data_5130)
ggplot(data = data_5130, mapping = aes(x = factor(year), y = simple_shanon_index, fill = factor(enebær))) +
geom_boxplot() + geom_jitter(width=0.1,alpha=0.2)
library(tidyverse)
ggplot(data = data_5130, mapping = aes(x = factor(year), y = simple_shanon_index, fill = factor(enebær))) +
geom_boxplot() + geom_jitter(width=0.1,alpha=0.2)
ggplot(data = data_5130, mapping = aes(x = factor(year), y = simple_shanon_index, fill = factor(enebær))) +
geom_boxplot() + geom_jitter(width=0.1,alpha=0.2)
library(tidyverse)
library(ggmap)
library(tmaptools)
library(sp)
library(rgdal)
library(mapproj)
library(ggrepel)
library(osmar)
library(maps)
library(OpenStreetMap)
library(gganimate)
library(ggplot2)
library(gifski)
library(png)
source("functions.r")
animation_map(data_5130, longtitude, latitude, shanon_index_v1, year )
animation_map(data_5130, longtitude, latitude, shanon_index_v2, year )
rm(list = ls())
cover <- read.csv("cover_data_5130.csv")
freq <- read.csv("frekvens_data_5130.csv")
abiotisk <- read.csv("abiotiske_data_5130.csv")
head(cover[,1:18])
head(freq[,1:18])
cover_data <- cover[,4:ncol(cover)]
freq_data <- freq[,4:ncol(freq)]
shanon_index_v2 <- function(cover_data, freq_data) {
#create data frame to hold the fitted values for each species
beta_fit <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("species","a", "b")
colnames(beta_fit) <- x
# for Each species calculate the shape parameter for the fitted beta distribution and save them in a data frame.
for (specie in colnames(cover_data)) {
beta_data <- cover_data[,specie]/16
#remove all plots with 0 in frekvens.
beta_data <- beta_data[freq_data[[specie]] == 1]
if (length(unique(beta_data)) > 1) {
beta_data_fitted <- fitdist(beta_data, "beta", method = "mme")
beta_fit[nrow(beta_fit) + 1,] <- c(specie, beta_data_fitted$estimate[1], beta_data_fitted$estimate[2])
}
}
# create list for shannon index for each plot
shanon_list <- c()
for (row in 1:nrow(cover_data)) {
# Create an empty list for a given row
mean_posterior <- c()
# for a given row, find out what species is found in frekvens
species_spotted_in_frekvens <- colnames(freq_data[c(freq_data[row,]  == 1)])
#For each species spotten in frekvens, appends its posterior cover to the cover data for that row
for (species_spotted in species_spotted_in_frekvens ) {
alpha_post <- as.numeric((as.numeric(beta_fit[beta_fit$species == species_spotted,]$a) +
as.numeric(cover_data[[species_spotted]][row]) ))
beta_post <-  as.numeric(beta_fit[beta_fit$species == species_spotted,]$b) + 16 - as.numeric(cover_data[[species_spotted]][row])
mean_posterior <- append(mean_posterior, (alpha_post)/(alpha_post+beta_post))
}
#Calculate the shanon index value and append it to the list after normalizing and removing zeroes
total_cover <- sum(mean_posterior)
mean_posterior <- mean_posterior[!(mean_posterior == 0)]
shanon_value <- -sum(mean_posterior/total_cover * log((mean_posterior/total_cover)))
shanon_list <- append(shanon_list,shanon_value)
}
return(shanon_list)
}
result <- shanon_index_v2(cover_data, freq_data)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(fitdistrplus)
library(tidyverse)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(fitdistrplus)
library(tidyverse)
cover <- read.csv("cover_data_5130.csv")
freq <- read.csv("frekvens_data_5130.csv")
abiotisk <- read.csv("abiotiske_data_5130.csv")
head(cover[,1:18])
head(freq[,1:18])
cover_data <- cover[,4:ncol(cover)]
freq_data <- freq[,4:ncol(freq)]
shanon_index_v2 <- function(cover_data, freq_data) {
#create data frame to hold the fitted values for each species
beta_fit <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("species","a", "b")
colnames(beta_fit) <- x
# for Each species calculate the shape parameter for the fitted beta distribution and save them in a data frame.
for (specie in colnames(cover_data)) {
beta_data <- cover_data[,specie]/16
#remove all plots with 0 in frekvens.
beta_data <- beta_data[freq_data[[specie]] == 1]
if (length(unique(beta_data)) > 1) {
beta_data_fitted <- fitdist(beta_data, "beta", method = "mme")
beta_fit[nrow(beta_fit) + 1,] <- c(specie, beta_data_fitted$estimate[1], beta_data_fitted$estimate[2])
}
}
# create list for shannon index for each plot
shanon_list <- c()
for (row in 1:nrow(cover_data)) {
# Create an empty list for a given row
mean_posterior <- c()
# for a given row, find out what species is found in frekvens
species_spotted_in_frekvens <- colnames(freq_data[c(freq_data[row,]  == 1)])
#For each species spotten in frekvens, appends its posterior cover to the cover data for that row
for (species_spotted in species_spotted_in_frekvens ) {
alpha_post <- as.numeric((as.numeric(beta_fit[beta_fit$species == species_spotted,]$a) +
as.numeric(cover_data[[species_spotted]][row]) ))
beta_post <-  as.numeric(beta_fit[beta_fit$species == species_spotted,]$b) + 16 - as.numeric(cover_data[[species_spotted]][row])
mean_posterior <- append(mean_posterior, (alpha_post)/(alpha_post+beta_post))
}
#Calculate the shanon index value and append it to the list after normalizing and removing zeroes
total_cover <- sum(mean_posterior)
mean_posterior <- mean_posterior[!(mean_posterior == 0)]
shanon_value <- -sum(mean_posterior/total_cover * log((mean_posterior/total_cover)))
shanon_list <- append(shanon_list,shanon_value)
}
return(shanon_list)
}
result <- shanon_index_v2(cover_data, freq_data)
result
abiotisk$shanon_index <- result
convert_to_longlat <- function(data_frame_input, UTMx, UTMy, projection = "+proj=utm +zone=32 +ellps=intl +units=m +no_defs +datum=WGS84") {
#Load Libraries
library(sp)
# Create a new data frame with only the UTM data
df <- data.frame(UTMx, UTMy)
# turn na to 0 for calculations and save which points are na
df_na <- df
df[is.na(df)] <- 0
#Make it a SP object and specify the projection
coordinates(df) <-  ~ UTMx + UTMy
proj4string(df) <- CRS(projection)
#Transform the data to long lat
df1 <- spTransform(df, CRS("+init=epsg:4326"))
# Write the long lat
data_frame_input$latitude <-  df1@coords[,2]
data_frame_input$longtitude <-  df1@coords[,1]
# Turn na back to na
data_frame_input$latitude[is.na(df_na[1]) ] <- NA
data_frame_input$longtitude[is.na(df_na[2]) ] <- NA
return(data_frame_input)
}
abiotisk <- convert_to_longlat(abiotisk, abiotisk$UTMx, abiotisk$UTMy)
animation_map <- function(data_frame_in, longtitude, latitude, index, time, duration_time = 15) {
library(ggmap)
library(ggplot2)
library(gifski)
library(png)
#Load map of Denmark
world.map <- map_data ("world")
map1 <- world.map %>% filter(region == "Denmark")
# change input values to strings, so it is easier to use.
index <- deparse(substitute(index))
time <- deparse(substitute(time))
latitude <- deparse(substitute(latitude))
longtitude <- deparse(substitute(longtitude))
# plot the map
map_ani <-  ggplot(map1)+
geom_map(map = map1, aes(long, lat, map_id = region), fill="white", colour = "black") +
coord_map()
# Add points
map_ani <-  map_ani +
geom_point(data = data_frame_in, aes(y= .data[[latitude]], x = .data[[longtitude]], colour = .data[[index]]), alpha = .9, size =5) +
scale_color_gradientn(colours = rainbow(5)) +
transition_states(factor(data_frame_in[[time]]), transition_length = 1, state_length = 1) +
labs(title = "Year: {next_state}")
#create animation
animate(map_ani,  nframes = 2*length(unique(data_frame_in[[time]])), duration = duration_time)
}
animation_map(abiotisk, longtitude, latitude, shanon_index, year)
rm(list = ls())
help(rnorm)
knitr::opts_chunk$set(echo = TRUE)
n <- 50
m <- 50
mu <- 10
delta <- 1
sigma <- 2
fist_50 <- rnorm(50,mu, sigma^2)
second_50 <- rnorm(50, mu+delta, sigma^2)
n <- 50
m <- 50
mu <- 10
delta <- 1
sigma <- 2
first_50 <- rnorm(50,mu, sigma^2)
second_50 <- rnorm(50, mu+delta, sigma^2)
all <- first_50
all <- append(all, second_50)
n <- 50
m <- 50
mu <- 10
delta <- 1
sigma <- 2
first_50 <- rnorm(50,mu, sigma^2)
second_50 <- rnorm(50, mu+delta, sigma^2)
Y <- first_50
Y <- append(Y, second_50)
data_5130 <-  read.csv("../Data/processed data/data_5130.csv")
naive_site <-  naive_model(cover_data, frekvens_data, 0.67)
data_5130$shanon_index_v1 <-  shanon_index_v1(cover_data1, frekvens_data1)
data_5130_site <- data_5130[, c("plot", "site", "year")]
cover_data1 <-  data_5130[, grep("Cover", names(data_5130))]
colnames(cover_data1) <- gsub("Cover", "", colnames(cover_data1))
frekvens_data1 <-  data_5130[, grep("Frekvens", names(data_5130))]
colnames(frekvens_data1) <- gsub("Frekvens", "", colnames(frekvens_data1))
cover_data <-  cbind(data_5130_site , cover_data1)
frekvens_data <- cbind(data_5130_site, frekvens_data1)
library(tidyverse)
library(fitdistrplus)
source("functions.r")
shanon_index_v2_beta <- function(cover_data, frekvens_data) {
#Load functions
library(tidyverse)
library(fitdistrplus)
#create data frame to hold the fitted values for each species
beta_fit <- data.frame(matrix(ncol = 4, nrow = 0))
x <- c("species","a", "b","n")
colnames(beta_fit) <- x
# for Each species calculate the shape parameter for the fitted beta distribution and save them in a data frame.
for (specie in colnames(cover_data)) {
beta_data <- cover_data[,specie]/16
#remove all plots with 0 in cover or remove all plots with 0 in frekvens.
#beta_data <- beta_data[!(beta_data == 0)]
beta_data <- beta_data[!(frekvens_data[[specie]] == 0)]
if (length( unique(beta_data)) > 1) {
beta_data_fitted <- fitdist(beta_data, "beta", method = "mme")
beta_fit[nrow(beta_fit) + 1,] <- c(specie, beta_data_fitted$estimate[1], beta_data_fitted$estimate[2], length(beta_data))
}
}
return(beta_fit)
}
plot_mean <- function(beta_data, cover_data, frekvens_data, art = "X2020") {
beta_fit <- beta_data
species_spotted <- art
p = seq(0,1, length=100)
a <- as.numeric(beta_fit$a[beta_fit$specie == species_spotted ])
b <- as.numeric(beta_fit$b[beta_fit$specie == species_spotted ])
art_navn <- paste0(find_art_name(parse_number(art)),",   Antal data punkter: " , beta_fit$n[beta_fit$specie == species_spotted ])
plot(p, dbeta(p, a, b), ylab="density", type ="l", col=4, main= art_navn)
for (i in 0:16 ) {
alpha_post <- as.numeric((as.numeric(beta_fit[beta_fit$species == species_spotted,]$a) + i ))
beta_post <-  as.numeric(beta_fit[beta_fit$species == species_spotted,]$b) + 16 - i
abline(v = (alpha_post)/(alpha_post+beta_post), col = "blue")
abline(v = i/16, col = "red")
}
art_cover <- cover_data[,art]
print(art_cover[!(frekvens_data[[art]] == 0)])
#print(sum(frekvens_data[[art]] > 0))
return()
}
beta <-  shanon_index_v2_beta(cover_data1, frekvens_data1)
plot_mean(beta, cover_data1, frekvens_data1, art = "X7548")
find_art_name <- function(nr) {
return(artsliste$NavnDansk[artsliste$ArtID == nr])
}
find_art_name(20266)
artslist <- read.csv("../../Raw data/artsliste.csv")
find_art_name <- function(nr) {
return(artsliste$NavnDansk[artsliste$ArtID == nr])
}
find_art_name(20266)
artsliste <- read.csv("../../Raw data/artsliste.csv")
find_art_name <- function(nr) {
return(artsliste$NavnDansk[artsliste$ArtID == nr])
}
find_art_name(20266)
plot_mean(beta, cover_data1, frekvens_data1, art = "X7548")
View(beta)
specie <- "7180"
beta_data <- cover_data[,specie]/16
library(tidyverse)
library(ggmap)
library(tmaptools)
library(sp)
library(rgdal)
library(mapproj)
library(ggrepel)
library(osmar)
library(maps)
library(OpenStreetMap)
library(gganimate)
library(ggplot2)
library(gifski)
library(png)
library(tidyverse)
library(ggmap)
library(tmaptools)
library(sp)
library(rgdal)
library(mapproj)
library(ggrepel)
library(osmar)
library(maps)
library(OpenStreetMap)
library(gganimate)
library(ggplot2)
library(gifski)
library(png)
source("functions.r")
data_5130 <-read.csv("../Data/Processed data/data_5130.csv")
data_5130 <- convert_to_longlat(data_5130, data_5130$UTMx, data_5130$UTMy)
world.map <- map_data ("world")
map1 <- world.map %>% filter(region == "Denmark")
ggplot(map1)+
geom_map(map = map1, aes(long, lat, map_id = region), fill="white", colour = "black") +
coord_map() +
geom_point(data = data_5130, aes(y=latitude, x = longtitude, colour = ), alpha = .9, size =2)
#geom_text_repel(data  = data_5130, aes(y=latitude, x = longtitude, label=site),hjust=0, vjust=0, max.overlaps = 100)
mean_site_pos <-  data_5130 %>%
group_by(site) %>%
summarise_at(vars(longtitude, latitude),mean,na.rm = TRUE)
mean_site_pos <-  rename(mean_site_pos, longtitude_mean_site = longtitude, latitude_mean_site = latitude)
data_5130 <-left_join(data_5130,mean_site_pos, by = "site")
ggplot(map1)+
geom_map(map = map1, aes(long, lat, map_id = region), fill="white", colour = "black") +
coord_map() +
geom_point(data = data_5130, aes(y=latitude, x = longtitude, colour = simple_shanon_index), alpha = .9, size =2) +
geom_text_repel(data  = mean_site_pos, aes(y=latitude_mean_site, x = longtitude_mean_site, label=site),hjust=0, vjust=0)
write.csv(data_5130, file = "../Data/Processed data//data_5130.csv", row.names=FALSE)
site_6230 <-  site_aggregate(data_6230, c("shanon_index_v2"), max)
data_6230 <-read.csv("../Data/Processed data/data_6230.csv")
View(data_5130)
View(data_5130)
View(data_6230)
library(tidyverse)
library(ggmap)
library(tmaptools)
library(sp)
library(rgdal)
library(mapproj)
library(ggrepel)
library(osmar)
library(maps)
library(OpenStreetMap)
library(gganimate)
library(ggplot2)
library(gifski)
library(png)
source("functions.r")
data_5130 <-read.csv("../Data/Processed data/data_5130.csv")
data_6230 <-read.csv("../Data/Processed data/data_6230.csv")
data_5130 <- convert_to_longlat(data_5130, data_5130$UTMx, data_5130$UTMy)
world.map <- map_data ("world")
map1 <- world.map %>% filter(region == "Denmark")
ggplot(map1)+
geom_map(map = map1, aes(long, lat, map_id = region), fill="white", colour = "black") +
coord_map() +
geom_point(data = data_5130, aes(y=latitude, x = longtitude, colour = ), alpha = .9, size =2)
#geom_text_repel(data  = data_5130, aes(y=latitude, x = longtitude, label=site),hjust=0, vjust=0, max.overlaps = 100)
mean_site_pos <-  data_5130 %>%
group_by(site) %>%
summarise_at(vars(longtitude, latitude),mean,na.rm = TRUE)
mean_site_pos <-  rename(mean_site_pos, longtitude_mean_site = longtitude, latitude_mean_site = latitude)
data_5130 <-left_join(data_5130,mean_site_pos, by = "site")
ggplot(map1)+
geom_map(map = map1, aes(long, lat, map_id = region), fill="white", colour = "black") +
coord_map() +
geom_point(data = data_5130, aes(y=latitude, x = longtitude, colour = simple_shanon_index), alpha = .9, size =2) +
geom_text_repel(data  = mean_site_pos, aes(y=latitude_mean_site, x = longtitude_mean_site, label=site),hjust=0, vjust=0)
write.csv(data_5130, file = "../Data/Processed data//data_5130.csv", row.names=FALSE)
site_6230 <-  site_aggregate(data_6230, c("shanon_index_v2"), max)
animation_map(site_6230, longtitude, latitude, shanon_index_v2, year )
animation_map(data_5130, longtitude, latitude, shanon_index_v2, year )
map_data <-  data_5130[data_5130$site == 4531,] %>%  select(longtitude, latitude, longtitude_mean_site, latitude_mean_site)
map_test2 <- openproj(map_test, projection = "+proj=longlat")
View(data_5130)
map_data <-  data_5130[data_5130$site == 4531,] %>%  select(longtitude, latitude, longtitude_mean_site.x, latitude_mean_site.x)
x_min <- min(map_data$longtitude)
x_max <- max(map_data$longtitude)
y_min <-  min(map_data$latitude)
y_max <- max(map_data$latitude)
x_min_proj <-  x_min - (x_max - x_min) *0.2
x_max_proj <-  x_max + (x_max - x_min) *0.2
y_min_proj <-  y_min - (y_max - y_min) *0.2
y_max_proj <-  y_max + (y_max - y_min) *0.2
lat_mean <-  map_data$latitude_mean_site[1]
long_mean <- map_data$longtitude_mean_site[1]
max_diff <- (max((x_max - x_min), (y_max - y_min)))/2
x_min_proj2 <- min(x_min - (x_max - x_min) *0.2, long_mean- max_diff)
x_max_proj2 <- max(x_max + (x_max - x_min) *0.2, long_mean + max_diff)
y_min_proj2 <- min(y_min - (y_max - y_min) *0.2, lat_mean- max_diff)
y_max_proj2 <-  max(y_max + (y_max - y_min) *0.2, lat_mean + max_diff)
map_test <- openmap(c(y_max_proj2,x_min_proj2),c(y_min_proj2,x_max_proj2),zoom = NULL,'bing')
map_test2 <- openproj(map_test, projection = "+proj=longlat")
OpenStreetMap::autoplot.OpenStreetMap(map_test2) + geom_point(data = map_data, mapping = aes(x = longtitude, y = latitude), color = "red", size = 4)
map_test <- openmap(c(y_max,x_min),c(y_min,x_max),zoom = NULL,'bing')
OpenStreetMap::autoplot.OpenStreetMap(map_test)
source("functions.r")
test <- convert_to_longlat(data_5130, data_5130$UTMx, data_5130$UTMy, projection = "+proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")
test <- convert_to_longlat(data_5130, data_5130$UTMx, data_5130$UTMy, projection = "EPSG:25832")
"EPSG:25832"
CRS("+init=epsg:28992")
test <- convert_to_longlat(data_5130, data_5130$UTMx, data_5130$UTMy, projection = "+init=epsg:25832")
CRS("+init=epsg:25832")
test$longtitude - data_5130$longtitude
test$latitude - data_5130$latitude
